// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: item/v1/item.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Item_CreateItem_FullMethodName = "/item.v1.Item/CreateItem"
	Item_UpdateItem_FullMethodName = "/item.v1.Item/UpdateItem"
	Item_ItemDetail_FullMethodName = "/item.v1.Item/ItemDetail"
	Item_ItemList_FullMethodName   = "/item.v1.Item/ItemList"
)

// ItemClient is the client API for Item service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemClient interface {
	// 创建内容
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemReply, error)
	// 更新内容
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemReply, error)
	// 查询文章详情
	ItemDetail(ctx context.Context, in *ItemDetailRequest, opts ...grpc.CallOption) (*ItemDetailReply, error)
	// 查看文章列表详情
	ItemList(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*ItemListReply, error)
}

type itemClient struct {
	cc grpc.ClientConnInterface
}

func NewItemClient(cc grpc.ClientConnInterface) ItemClient {
	return &itemClient{cc}
}

func (c *itemClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemReply, error) {
	out := new(CreateItemReply)
	err := c.cc.Invoke(ctx, Item_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemReply, error) {
	out := new(UpdateItemReply)
	err := c.cc.Invoke(ctx, Item_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) ItemDetail(ctx context.Context, in *ItemDetailRequest, opts ...grpc.CallOption) (*ItemDetailReply, error) {
	out := new(ItemDetailReply)
	err := c.cc.Invoke(ctx, Item_ItemDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) ItemList(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*ItemListReply, error) {
	out := new(ItemListReply)
	err := c.cc.Invoke(ctx, Item_ItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServer is the server API for Item service.
// All implementations must embed UnimplementedItemServer
// for forward compatibility
type ItemServer interface {
	// 创建内容
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemReply, error)
	// 更新内容
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemReply, error)
	// 查询文章详情
	ItemDetail(context.Context, *ItemDetailRequest) (*ItemDetailReply, error)
	// 查看文章列表详情
	ItemList(context.Context, *ItemListRequest) (*ItemListReply, error)
	mustEmbedUnimplementedItemServer()
}

// UnimplementedItemServer must be embedded to have forward compatible implementations.
type UnimplementedItemServer struct {
}

func (UnimplementedItemServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemServer) ItemDetail(context.Context, *ItemDetailRequest) (*ItemDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemDetail not implemented")
}
func (UnimplementedItemServer) ItemList(context.Context, *ItemListRequest) (*ItemListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemList not implemented")
}
func (UnimplementedItemServer) mustEmbedUnimplementedItemServer() {}

// UnsafeItemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServer will
// result in compilation errors.
type UnsafeItemServer interface {
	mustEmbedUnimplementedItemServer()
}

func RegisterItemServer(s grpc.ServiceRegistrar, srv ItemServer) {
	s.RegisterService(&Item_ServiceDesc, srv)
}

func _Item_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_ItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ItemDetail(ctx, req.(*ItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_ItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ItemList(ctx, req.(*ItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Item_ServiceDesc is the grpc.ServiceDesc for Item service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Item_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.v1.Item",
	HandlerType: (*ItemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _Item_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Item_UpdateItem_Handler,
		},
		{
			MethodName: "ItemDetail",
			Handler:    _Item_ItemDetail_Handler,
		},
		{
			MethodName: "ItemList",
			Handler:    _Item_ItemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/v1/item.proto",
}
